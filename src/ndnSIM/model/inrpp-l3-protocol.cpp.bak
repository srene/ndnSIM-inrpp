/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/**
 * Copyright (c) 2011-2015  Regents of the University of California.
 *
 * This file is part of ndnSIM. See AUTHORS for complete list of ndnSIM authors and
 * contributors.
 *
 * ndnSIM is free software: you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * ndnSIM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ndnSIM, e.g., in COPYING.md file.  If not, see <http://www.gnu.org/licenses/>.
 **/

#include "inrpp-l3-protocol.hpp"

#include "ns3/packet.h"
#include "ns3/node.h"
#include "ns3/log.h"
#include "ns3/callback.h"
#include "ns3/uinteger.h"
#include "ns3/trace-source-accessor.h"
#include "ns3/object-vector.h"
#include "ns3/pointer.h"
#include "ns3/simulator.h"

#include "ndn-net-device-transport.hpp"

#include "../helper/ndn-stack-helper.hpp"
#include "cs/ndn-content-store.hpp"

#include <boost/property_tree/info_parser.hpp>

#include "ns3/ndnSIM/NFD/daemon/fw/inrpp-forwarder.hpp"
#include "ns3/ndnSIM/NFD/daemon/face/internal-face.hpp"
#include "ns3/ndnSIM/NFD/daemon/face/internal-transport.hpp"
#include "ns3/ndnSIM/NFD/daemon/mgmt/fib-manager.hpp"
#include "ns3/ndnSIM/NFD/daemon/mgmt/face-manager.hpp"
#include "ns3/ndnSIM/NFD/daemon/mgmt/strategy-choice-manager.hpp"
#include "ns3/ndnSIM/NFD/daemon/mgmt/forwarder-status-manager.hpp"
// #include "ns3/ndnSIM/NFD/daemon/mgmt/general-config-section.hpp"
#include "ns3/ndnSIM/NFD/daemon/mgmt/tables-config-section.hpp"
#include "ns3/ndnSIM/NFD/daemon/mgmt/command-authenticator.hpp"

#include "ns3/ndnSIM/NFD/rib/rib-manager.hpp"

#include "ns3/ndnSIM/NFD/daemon/face/null-face.hpp"
#include "ns3/ndnSIM/NFD/daemon/face/internal-face.hpp"

#include "ns3/ndnSIM/NFD/core/config-file.hpp"

#include <ndn-cxx/mgmt/dispatcher.hpp>

NS_LOG_COMPONENT_DEFINE("ndn.InrppL3Protocol");

namespace ns3 {
namespace ndn {



NS_OBJECT_ENSURE_REGISTERED(InrppL3Protocol);

TypeId
InrppL3Protocol::GetTypeId(void)
{
  static TypeId tid =
    TypeId("ns3::ndn::InrppL3Protocol")
      .SetGroupName("ndn")
      .SetParent<L3Protocol>()
      .AddConstructor<InrppL3Protocol>()
    ;
  return tid;
}

class Impl {
private:
  Impl()
  {
	  NS_LOG_FUNCTION(this);
    // Do not modify initial config file. Use helpers to set specific NFD parameters
    std::string initialConfig =
      "general\n"
      "{\n"
      "}\n"
      "\n"
	  "log\n"
	  "{\n"
	  "  default_level ALL\n"
	  "  NameTree ALL\n"
	  "  InrppStrategy ALL\n"
	  "  InternalFace ALL\n"
	  "  Forwarder ALL\n"
	  "  ContentStore ALL\n"
	  "  DeadNonceList ALL\n"
	  "}\n"
      "tables\n"
      "{\n"
      "  cs_max_packets 100\n"
      "\n"
      "  strategy_choice\n"
      "  {\n"
      "    /               /localhost/nfd/strategy/inrpp\n"
      "    /localhost      /localhost/nfd/strategy/multicast\n"
      "    /localhost/nfd  /localhost/nfd/strategy/inrpp\n"
      "    /ndn/multicast  /localhost/nfd/strategy/multicast\n"
      "  }\n"
      "}\n"
      "\n"
      // "face_system\n"
      // "{\n"
      // "}\n"
      "\n"
      "authorizations\n"
      "{\n"
      "  authorize\n"
      "  {\n"
      "    certfile any\n"
      "    privileges\n"
      "    {\n"
      "      faces\n"
      "      fib\n"
      "      strategy-choice\n"
      "    }\n"
      "  }\n"
      "}\n"
      "\n"
      "rib\n"
      "{\n"
      "  localhost_security\n"
      "  {\n"
      "    trust-anchor\n"
      "    {\n"
      "      type any\n"
      "    }\n"
      "  }\n"
      "}\n"
      "\n";

    std::istringstream input(initialConfig);
    boost::property_tree::read_info(input, m_config);
  }

  friend class InrppL3Protocol;

  std::shared_ptr<nfd::InrppForwarder> m_forwarder;

  std::shared_ptr<nfd::Face> m_internalFace;
  std::shared_ptr<::ndn::Face> m_internalClientFace;
  std::shared_ptr<nfd::CommandAuthenticator> m_authenticator;

  std::shared_ptr<nfd::Face> m_internalRibFace;
  std::shared_ptr<::ndn::Face> m_internalRibClientFace;

  std::unique_ptr<::ndn::mgmt::Dispatcher> m_dispatcher;
  std::unique_ptr<::ndn::mgmt::Dispatcher> m_dispatcherRib;
  std::shared_ptr<nfd::FibManager> m_fibManager;
  std::shared_ptr<nfd::FaceManager> m_faceManager;
  std::shared_ptr<nfd::StrategyChoiceManager> m_strategyChoiceManager;
  std::shared_ptr<nfd::ForwarderStatusManager> m_forwarderStatusManager;
  std::shared_ptr<nfd::rib::RibManager> m_ribManager;

  nfd::ConfigSection m_config;

  Ptr<ContentStore> m_csFromNdnSim;
  L3Protocol::PolicyCreationCallback m_policy;
};

InrppL3Protocol::InrppL3Protocol()
  : L3Protocol()
{
  NS_LOG_FUNCTION(this);
}

InrppL3Protocol::~InrppL3Protocol()
{
  NS_LOG_FUNCTION(this);
}


/*
 * This method is called by AddAgregate and completes the aggregation
 * by setting the node in the ndn stack
 */
void
InrppL3Protocol::NotifyNewAggregate()
{
  if (m_node == nullptr) {
    m_node = GetObject<Node>();
    if (m_node != nullptr) {
      initialize();

      NS_ASSERT(m_impl->m_forwarder != nullptr);
      m_impl->m_csFromNdnSim = GetObject<ContentStore>();
      if (m_impl->m_csFromNdnSim != nullptr) {
        m_impl->m_forwarder->setCsFromNdnSim(m_impl->m_csFromNdnSim);
      }
    }
  }

  Object::NotifyNewAggregate();
}
void
InrppL3Protocol::initialize()
{
  NS_LOG_FUNCTION(this);
  m_impl->m_forwarder = make_shared<nfd::InrppForwarder>();

  initializeManagement();

  nfd::FaceTable& faceTable = m_impl->m_forwarder->getFaceTable();
  faceTable.addReserved(nfd::face::makeNullFace(), nfd::face::FACEID_NULL);
  faceTable.addReserved(nfd::face::makeNullFace(FaceUri("contentstore://")), nfd::face::FACEID_CONTENT_STORE);

  if (!this->getConfig().get<bool>("ndnSIM.disable_rib_manager", false)) {
    Simulator::ScheduleWithContext(m_node->GetId(), Seconds(0), &L3Protocol::initializeRibManager, this);
  }

  m_impl->m_forwarder->beforeSatisfyInterest.connect(std::ref(m_satisfiedInterests));
  m_impl->m_forwarder->beforeExpirePendingInterest.connect(std::ref(m_timedOutInterests));
}


void
InrppL3Protocol::initializeManagement()
{
  NS_LOG_FUNCTION(this);
  auto& forwarder = m_impl->m_forwarder;
  using namespace nfd;
  std::tie(m_impl->m_internalFace, m_impl->m_internalClientFace) = face::makeInternalFace(StackHelper::getKeyChain());
  forwarder->getFaceTable().addReserved(m_impl->m_internalFace, face::FACEID_INTERNAL_FACE);
  m_impl->m_dispatcher.reset(new ::ndn::mgmt::Dispatcher(*m_impl->m_internalClientFace, StackHelper::getKeyChain()));

  m_impl->m_authenticator = CommandAuthenticator::create();

  m_impl->m_fibManager.reset(new FibManager(forwarder->getFib(),
                                            forwarder->getFaceTable(),
                                            *m_impl->m_dispatcher,
                                            *m_impl->m_authenticator));

  // Cannot be disabled for now
  // if (!this->getConfig().get<bool>("ndnSIM.disable_face_manager", false)) {
  m_impl->m_faceManager.reset(new FaceManager(forwarder->getFaceTable(),
                                              *m_impl->m_dispatcher,
                                              *m_impl->m_authenticator));
  // }
  // else {
  //   this->getConfig().get_child("authorizations").get_child("authorize").get_child("privileges").erase("faces");
  // }

  if (!this->getConfig().get<bool>("ndnSIM.disable_strategy_choice_manager", false)) {
    m_impl->m_strategyChoiceManager.reset(new StrategyChoiceManager(forwarder->getStrategyChoice(),
                                                                    *m_impl->m_dispatcher,
                                                                    *m_impl->m_authenticator));
  }
  else {
    this->getConfig().get_child("authorizations").get_child("authorize").get_child("privileges").erase("strategy-choice");
  }

  if (!this->getConfig().get<bool>("ndnSIM.disable_forwarder_status_manager", false)) {
    m_impl->m_forwarderStatusManager.reset(new ForwarderStatusManager(*forwarder, *m_impl->m_dispatcher));
  }

  ConfigFile config(&ConfigFile::ignoreUnknownSection);
	NS_LOG_LOGIC("Set policy "<<m_impl->m_policy()->getName());

  // if we use NFD's CS, we have to specify a replacement policy
  m_impl->m_csFromNdnSim = GetObject<ContentStore>();
  if (m_impl->m_csFromNdnSim == nullptr) {
	NS_LOG_LOGIC("Set policy "<<m_impl->m_policy()->getName());
    forwarder->getCs().setPolicy(m_impl->m_policy());
    forwarder->getCs().setLimit(100);
  }

  TablesConfigSection tablesConfig(*forwarder);
  tablesConfig.setConfigFile(config);

  m_impl->m_authenticator->setConfigFile(config);

  // if (!this->getConfig().get<bool>("ndnSIM.disable_face_manager", false)) {
  m_impl->m_faceManager->setConfigFile(config);
  // }

  // apply config
  config.parse(m_impl->m_config, false, "ndnSIM.conf");

  tablesConfig.ensureConfigured();

  // add FIB entry for NFD Management Protocol
  Name topPrefix("/localhost/nfd");
  auto entry = forwarder->getFib().insert(topPrefix).first;
  entry->addNextHop(*(m_impl->m_internalFace), 0);
  m_impl->m_dispatcher->addTopPrefix(topPrefix, false);
}


} // namespace ndn
} // namespace ns3
